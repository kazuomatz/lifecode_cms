#  Admin::<%= @file_name.pluralize.camelize %>Controller
#  Generated by LifeCodeCMS Scaffold Generator
module Admin
  class <%= model_name.pluralize %>Controller < Admin::BaseController
    layout 'application'
    before_action  :authenticate_user!
    before_action  :check_execute_permission
    before_action  :permit_params, only: %i[create update]
    before_action  :set_referer, only: [:edit, :new]
    before_action  :set_default_params, only: [:edit, :new, :update, :destroy]

    def index
      if request.xhr?
        <%= var_models %> = Admin::<%= model_name %>.search(params).page(params[:page]).per(20)
        pagination = view_context.paginate(<%= var_models %>, remote: true, window: 1)
        content = render_to_string(partial: 'list.html', locals: { search_params: merge_search_params, <%= var_models %>: <%= var_models %>  })
        render json: { pagination: pagination, content: content, page: params[:page] || 1, status: 'OK' }
      else
        render
      end
    end

    def new
      flash[:alert] = nil
      if request.xhr?
        render template: 'admin/<%= var_models %>/modal_form', locals: { <%= var_model %>: @<%= var_model %> }, layout: false
      else
        render
      end
    end

    def edit
      if request.xhr?
        render template: 'admin/<%= var_models %>/modal_form', locals: { <%= var_model %>: @<%= var_model %> }, layout: false
      else
        render
      end
    end

    def create
      flash[:alert] = nil
      @<%= var_model %> = Admin::<%= model_name %>.new(@attr)
      if @<%= var_model.singularize.underscore %>.save
        if request.xhr?
          render json:{ status: 200 }
        else
          redirect_to session[params[:controller]] && session[params[:controller]]['return_path'] || admin_<%= var_models %>_path
        end
      else
        flash[:alert] = @<%= var_model %>.errors.messages
        set_default_params
        @<%= var_model %> = Admin::<%= model_name %>.new(@attr)
        render template: '/admin/<%= model_name.pluralize.underscore %>/new'
      end
    end

    def update
      flash[:alert] = nil
      begin
        params.keys.each do |key|
          if key.index('delete_') == 0
            if params[key] == 'true'
              item = key.gsub('delete_admin_','').gsub('<%= var_model%>_','')
              @attr[item] = nil
            end
          end
        end

        if @<%= var_model %>.update(@attr)
          if request.xhr?
            render json:{ status: 200 }
          else
            redirect_to session[params[:controller]] && session[params[:controller]]['return_path'] || admin_<%= var_models %>_path
          end
        else
          flash[:alert] = @<%= var_model %>.errors.messages
          set_default_params(false)
          render template: '/admin/<%= model_name.pluralize.underscore %>/edit'
        end
      rescue StandardError => e
          rescue_500(e)
      end
    end

    def destroy
      @<%= var_model %>.destroy
      render json: { status:200 }
    end

    private

    def permit_params
      @attr = params.require('admin_<%= var_model %>').permit(
        <%= model.permit_attributes %>
      )
      <%= model.name %>.form_attributes.select {| column |  column[:type] == :datetime || column[:type] == :timestamp }.each do |date_column|
        time = params['admin_<%= var_model %>'][date_column[:name] + '_time'] || '00:00'
        @attr[date_column[:name]] = "#{@attr[date_column[:name]]} #{time}"
        @attr.delete(date_column[:name] + '_year')
        @attr.delete(date_column[:name] + '_month')
        @attr.delete(date_column[:name] + '_day')
        @attr.delete(date_column[:name] + '_time')
      end

      <%= model.name %>.form_attributes.select {| column | column[:type] == :currency}.each do |currency_column|
        @attr[currency_column[:name]] = @attr[currency_column[:name]].gsub(',','')
      end

    end

    def set_default_params(reload=true)
      if reload
		if params[:action] == 'new' || params[:action] == 'create'
		  @<%= var_model %> = Admin::<%= model_name %>.new
		else
		  @<%= var_model %> = Admin::<%= model_name %>.where(id: params[:id]).first
		  if @<%= var_model %>.nil?
		    rescue_404
			return
		  end
		end
      end
      @city_data = {}
      Admin::<%= model_name %>.prefecture_attributes.each do |column|
        if column[:city_column].present?
          if @<%= var_model %>.new_record?
            @<%= var_model %>[column[:name]] = column[:default_prefecture_code] || 1
            prefecture = Prefecture.where(code: @<%= var_model %>[column[:name]]).first
            if column[:default_city_code].blank?
              city = City.where(prefecture_code: prefecture.code).first
            else
              city = City.where(code: column[:default_city_code]).first
            end
            @<%= var_model %>[column[:city_column]] = city.code
            @<%= var_model %>[column[:name].gsub('_code','_name')] = prefecture.name
            @<%= var_model %>[column[:city_column].gsub('_code','_name')] = city.name
          end
          @city_data[column[:city_column]] = City.where(prefecture_code: @<%= var_model %>[column[:name]]).map {|c| [c.name, c.code, {'data-name' => c.name}]}
        end
      end
    end
  end
end
